apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "roman.fullname" . }}
  labels:
    {{- include "roman.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "roman.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "roman.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DB_URL
              value: "{{ .Release.Name }}-postgresql"
            - name: DB_USER
              value: "postgres"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-postgresql"
                  key: postgresql-password

            # TODO: generate secret on helm install. Currently instructions are printed after install
            - name: APP_KEY
              valueFrom:
                secretKeyRef:
                  name: roman-secrets
                  key: jwt-secret
            # TODO: People need to kubectl apply -f the pubkey afterwards. Instructions are printed after install
            # https://github.com/wireapp/roman#getting-the-roman_pub_key_base64
            - name: ROMAN_PUB_KEY_BASE64
              valueFrom:
                secretKeyRef:
                  name: roman-secrets
                  key: roman-pub-key-base64
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8081
              protocol: TCP
            - containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/status
              port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
          # for L7 LB
          readinessProbe:
            httpGet:
              path: /api/status
              port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
