syntax = "proto3";

import "google/protobuf/empty.proto";

package federator;

message HelloRequest { string name = 1; }
message HelloReply { string message = 1; }

// FUTUREWORK: When this file changes, the GRPC/Proto.hs needs to be recompiled. This currently doesn't happen automatically. Perhaps some template haskell 'addDependentFile'

// FUTUREWORK: bikeshed on the naming of services

// FUTUREWORK: split the "internal" and "public" protobuf services
// (exposed maybe on different ports)
service Service {
    // ----------- Dummy -----------------------------------------
    rpc SayHello (HelloRequest) returns (HelloReply) {}


    // ----------- Internal -----------------------------------------
    // Used by brig and other wire-services to talk to other backends
    // --------------------------------------------------------------

    // FUTUREWORK: replace with (or add) getUserByHandle returning a full profile (see https://wearezeta.atlassian.net/browse/SQCORE-365)
    rpc GetUserIdByHandle (QualifiedHandle) returns (QualifiedId) {}


    // ----------- Public -----------------------------------------
    // Used by other backends hosted on another domain
    // Service Naming possibilities: Gateway Inbound Strangers Public ...
    // --------------------------------------------------------------
    rpc FederatedGetUserIdByHandle (QualifiedHandle) returns (QualifiedId) {}

}

message QualifiedHandle {
    string domain = 1;
    string handle = 2;
}

  /* { profileQualifiedId :: Qualified UserId, */
  /*   profileName :: Name, */
  /*   -- | DEPRECATED */
  /*   profilePict :: Pict, */
  /*   profileAssets :: [Asset], */
  /*   profileAccentId :: ColourId, */
  /*   profileDeleted :: Bool, */
  /*   -- | Set if the user represents an external service, */
  /*   -- i.e. it is a "bot". */
  /*   profileService :: Maybe ServiceRef, */
  /*   profileHandle :: Maybe Handle, */
  /*   profileLocale :: Maybe Locale, */
  /*   profileExpire :: Maybe UTCTimeMillis, */
  /*   profileTeam :: Maybe TeamId, */
  /*   profileEmail :: Maybe Email */
message UserProfile {
    QualifiedId qualifiedId = 1;
    string displayName = 2;
    /* QualifiedHandle qualifiedHandle = 3; */
}

message QualifiedId {
    string domain = 1;
    string id = 2; // UUID? bytestring?
}
